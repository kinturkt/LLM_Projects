import streamlit as st
import pandas as pd
import requests

API_URL = "http://localhost:8000"

st.set_page_config(page_title="SQLMind - An LLM Powered SQL Data Analyst", layout="centered")
st.title("Ask Questions About Your CSV File")

st.markdown("""
**Note:** Please upload a clean CSV file that meets the following:
- Encoded in UTF-8 or ISO-8859-1
- Has column headers in the first row
- No merged cells or inconsistent row lengths
- Not password protected or zipped
- Preferably under 10MB
""")

# Reset button
if st.button("Reset"):
    st.session_state.clear()
    st.success("Session cleared. Please manually refresh the page.")

uploaded_file = st.file_uploader("Upload your CSV file", type=["csv"])

if uploaded_file:
    if uploaded_file.size > 10 * 1024 * 1024:
        st.error("File is too large. Please upload a CSV under 10MB.")
        st.stop()

    with st.spinner("Uploading and processing..."):
        response = requests.post(
            f"{API_URL}/upload",
            files={"file": (uploaded_file.name, uploaded_file, "multipart/form-data")}
        )

    if response.ok:
        try:
            data = response.json()
            st.success("CSV uploaded and stored in database.")
            st.subheader("Data Preview")
            st.dataframe(pd.DataFrame(data["preview"]))
            st.session_state.schema = data["schema"]
        except ValueError:
            st.error("Server error: CSV might be malformed or too large.")
            st.stop()
    else:
        st.error("Failed to process CSV.")
        st.json(response.json())

if uploaded_file:
    question = st.text_input("Ask a question about your data:")

    if st.button("Ask"):
        with st.spinner("Thinking..."):
            res = requests.post(f"{API_URL}/query", data={"question": question})

        if res.ok:
            res_json = res.json()
            st.subheader("SQL Generated by LLM")
            st.code(res_json["sql"], language="sql")

            st.subheader("Results")
            st.dataframe(pd.DataFrame(res_json["results"]))
        else:
            st.error("Query failed.")
            st.json(res.json())
